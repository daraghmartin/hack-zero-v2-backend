# NOTE:           update this with your service name
service: hackOne-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource: "arn:aws:s3:::hack-zero-submission-files/*"

environment:
  MONGO_USER: ${env:MONGO_USER}
  MONGO_PASSWORD: ${env:MONGO_PASSWORD}
  MONGO_DEV_URL: ${env:MONGO_DEV_URL}
  AWS_ACCESS_KEY_ID: ${env:AWS_ACC_KEY_ID}
  AWS_SECRET: ${env:AWS_SECRET}
  AWS_USER_POOL_ID: ${env:AWS_USER_POOL_ID}
  ACCESS_CONTROL_ALLOW_ORIGIN: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}
  AWS_REGION_JWK: ${{env:AWS_REGION_JWK}}
  HOME: ${env:HOME}

custom:
  serverless-offline:
    port: 3001
  # dotenv:
  #   path: .env.production

functions:
  authorizerFunc:
    handler: ./services/auth/checkAuth.auth

  logout:
    handler: ./services/auth/logoutHandler.logout
    events:
      - http:
          path: logout
          method: post
          cors: true

  edithack:
    handler: ./services/hack/editHack.edit
    events:
      - http:
          path: edithack
          method: post
          cors: true
          authorizer: authorizerFunc

  authuser:
    handler: ./services/auth/authUser.auth
    events:
      - http:
          path: auth
          method: post
          cors: true
  registeruser:
    handler: ./services/auth/registerUser.register
    events:
      - http:
          path: register
          method: post
          cors: true
  hackdetail:
    handler: ./services/hack/hackDetail.detail
    events:
      - http:
          path: hackdetail/{id}
          method: get
          cors: true
  addhack:
    handler: ./services/hack/addHack.add
    events:
      - http:
          path: addhack
          method: post
          cors: true
          authorizer: authorizerFunc

  joinhack:
    handler: ./services/hack/joinHack.join
    events:
      - http:
          path: joinhack
          method: post
          cors: true
          authorizer: authorizerFunc
  gethacklist:
    handler: ./services/hack/getHacks.list
    events:
      - http:
          path: hacklist
          method: get
          cors: true
  userhacks:
    handler: ./services/hack/userHacks.list
    events:
      - http:
          path: userhacks/{id}
          method: get
          cors: true
  upload:
    handler: ./services/hack/uploadSubmission.upload
    events:
      - http:
          path: upload
          method: post
          cors: true

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: hack-zero-submission-files
        AccessControl: PublicRead
        CorsConfiguration:
          CorsRules:
          - AllowedMethods:
            - GET
            - PUT
            - POST
            - HEAD
            AllowedOrigins:
            - process.env.ACCESS_CONTROL_ALLOW_ORIGIN
            AllowedHeaders:
            - process.env.ACCESS_CONTROL_ALLOW_ORIGIN
