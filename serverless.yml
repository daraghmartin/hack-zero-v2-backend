# NOTE:           update this with your service name
service: hackOne-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs10.x
  stage: dev
  region: us-east-1

environment:
  MONGO_USER: ${self:custom.mongoUser:${self.custom.stage}}
  MONGO_PASSWORD: ${self:custom.mongoPassword:${self.custom.stage}}
  AWS_ACCESS_KEY_ID: ${env:AWS_ACC_KEY_ID}
  AWS_SECRET: ${env:AWS_SECRET}
  AWS_USER_POOL_ID: ${env:AWS_USER_POOL_ID}
  ACCESS_CONTROL_ALLOW_ORIGIN: ${env:ACCESS_CONTROL_ALLOW_ORIGIN}

custom:
  serverless-offline:
    port: 3001
  stage: ${opt:stage, self:provider.stage}
  mongoUser:
    staging: ${{env.MONGO_USER}}
    production: ${{secrets.MONGO_USER}}
  mongosPassword:
    staging: ${{env.MONGO_PASSWORD}}
    production: ${{secrets.MONGO_PASSWORD}}

functions:
  authuser:
    handler: authUser.auth
    events:
      - http:
          path: auth
          method: post
          cors: true
  registeruser:
    handler: registerUser.register
    events:
      - http:
          path: register
          method: post
          cors: true
  hackdetail:
    handler: hackDetail.detail
    events:
      - http:
          path: hackdetail/{id}
          method: get
          cors: true
  addhack:
    handler: addHack.add
    events:
      - http:
          path: addhack
          method: post
          cors: true
  joinhack:
    handler: joinHack.join
    events:
      - http:
          path: joinhack
          method: post
          cors: true
  gethacklist:
    handler: getHacks.list
    events:
      - http:
          path: hacklist
          method: get
          cors: true
